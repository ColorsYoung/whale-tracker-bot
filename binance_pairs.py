# binance_pairs.py
import re
from datetime import datetime
import requests

# reuse ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
from track_whale import send_line_message, load_state, save_state

API_URL = "https://www.binance.com/bapi/composite/v1/public/cms/article/list"

# -------------------------
# ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢
# -------------------------
def _fetch_articles():
    """
    ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Binance (‡∏´‡∏°‡∏ß‡∏î Listing/Pairs/Margin/Futures: catalogId=48)
    """
    params = {
        "type": 1,
        "catalogId": 48,   # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡∏¥‡∏™‡∏ï‡πå/‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î/‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡∏ü‡∏¥‡∏ß‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™ ‡∏°‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
        "pageNo": 1,
        "pageSize": 20
    }
    try:
        r = requests.get(API_URL, params=params, timeout=10)
        r.raise_for_status()
        return (r.json().get("data") or {}).get("articles", [])
    except Exception as e:
        print("‚ùå Fetch Binance pairs error:", e)
        return []

def _is_futures(title: str) -> bool:
    """‡∏à‡∏±‡∏ö Futures/Perpetual"""
    title = title or ""
    keys = [
        "Futures Will Launch",
        "Will Launch",
        "Perpetual Contract",
        "USDT-M Perpetual",
        "USD‚ìà-M Perpetual",
        "Coin-M Perpetual",
    ]
    return any(k in title for k in keys)

def _is_margin(title: str) -> bool:
    """‡∏à‡∏±‡∏ö Margin (Isolated/Cross/borrow/list)"""
    title = title or ""
    keys = [
        "Isolated Margin",
        "Cross Margin",
        "Margin Pairs",
        "Margin Trading",
        "Added to Margin",
        "Adds the following assets and pairs on Margin",
    ]
    return any(k in title for k in keys)

def _is_spot_pairs(title: str) -> bool:
    """‡∏à‡∏±‡∏ö Spot trading pairs ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏´‡∏°‡πà)"""
    title = title or ""
    # keywords ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢: Adds XXX/YYY, Will Add XXX/YYY, Adds Trading Pairs
    keys = [
        "Adds Trading Pairs",
        "Will Add Trading Pairs",
        "Adds the following trading pairs",
        "Adds",
        "Will Add",
    ]
    # ‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® "Will List" (‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏´‡∏°‡πà ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏ß‡πâ‡πÉ‡∏ô binance_listing.py ‡πÅ‡∏•‡πâ‡∏ß)
    if "Will List" in title:
        return False
    return any(k in title for k in keys) and bool(re.search(r"[A-Z0-9]{2,}/[A-Z]{2,5}", title))

def _fmt_dt(ms: int) -> str:
    try:
        return datetime.fromtimestamp(ms/1000).strftime("%Y-%m-%d %H:%M")
    except Exception:
        return "-"

# -------------------------
# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°
# -------------------------
def check_binance_pairs():
    """
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö 3 ‡∏´‡∏°‡∏ß‡∏î: Spot pairs / Margin pairs / Futures contracts
    - ‡∏Å‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏î‡πâ‡∏ß‡∏¢ state.json
    """
    state = load_state()
    state.setdefault("binance_pairs_spot", [])
    state.setdefault("binance_pairs_margin", [])
    state.setdefault("binance_pairs_futures", [])

    seen_spot   = set(state["binance_pairs_spot"])
    seen_margin = set(state["binance_pairs_margin"])
    seen_future = set(state["binance_pairs_futures"])

    articles = _fetch_articles()
#     articles = [
#     {"id": "test1", "title": "Binance Will List TEST (TEST/USDT)", "releaseDate": 1730000000000},
# ]
    if not articles:
        return

    # ‡πÄ‡∏î‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    for a in articles:
        aid   = str(a.get("id", ""))
        title = a.get("title", "") or ""
        ts    = int(a.get("releaseDate", 0))
        when  = _fmt_dt(ts)
        link  = "https://www.binance.com/en/support/announcement/" + aid

        try:
            if _is_futures(title):
                if aid not in seen_future:
                    msg = f"‚ö° Binance Futures: {title}\nTime: {when}\n{link}"
                    print(msg)
                    send_line_message(msg)
                    seen_future.add(aid)

            elif _is_margin(title):
                if aid not in seen_margin:
                    msg = f"üßÆ Binance Margin: {title}\nTime: {when}\n{link}"
                    print(msg)
                    send_line_message(msg)
                    seen_margin.add(aid)

            elif _is_spot_pairs(title):
                if aid not in seen_spot:
                    msg = f"üü¢ New Spot Pairs: {title}\nTime: {when}\n{link}"
                    print(msg)
                    send_line_message(msg)
                    seen_spot.add(aid)

        except Exception as e:
            print("‚ùå send_line_message error:", e)

    # save
    state["binance_pairs_spot"]   = list(seen_spot)
    state["binance_pairs_margin"] = list(seen_margin)
    state["binance_pairs_futures"] = list(seen_future)
    save_state(state)

if __name__ == "__main__":
    check_binance_pairs()
